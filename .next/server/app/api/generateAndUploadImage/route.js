"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/generateAndUploadImage/route";
exports.ids = ["app/api/generateAndUploadImage/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2FgenerateAndUploadImage%2Froute&page=%2Fapi%2FgenerateAndUploadImage%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2FgenerateAndUploadImage%2Froute.ts&appDir=D%3A%5CArtDocumentation%5C2024_ImageEcologySimulation%5CecologyAPI%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CArtDocumentation%5C2024_ImageEcologySimulation%5CecologyAPI&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2FgenerateAndUploadImage%2Froute&page=%2Fapi%2FgenerateAndUploadImage%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2FgenerateAndUploadImage%2Froute.ts&appDir=D%3A%5CArtDocumentation%5C2024_ImageEcologySimulation%5CecologyAPI%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CArtDocumentation%5C2024_ImageEcologySimulation%5CecologyAPI&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_ArtDocumentation_2024_ImageEcologySimulation_ecologyAPI_src_app_api_generateAndUploadImage_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/generateAndUploadImage/route.ts */ \"(rsc)/./src/app/api/generateAndUploadImage/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/generateAndUploadImage/route\",\n        pathname: \"/api/generateAndUploadImage\",\n        filename: \"route\",\n        bundlePath: \"app/api/generateAndUploadImage/route\"\n    },\n    resolvedPagePath: \"D:\\\\ArtDocumentation\\\\2024_ImageEcologySimulation\\\\ecologyAPI\\\\src\\\\app\\\\api\\\\generateAndUploadImage\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_ArtDocumentation_2024_ImageEcologySimulation_ecologyAPI_src_app_api_generateAndUploadImage_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/generateAndUploadImage/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnZW5lcmF0ZUFuZFVwbG9hZEltYWdlJTJGcm91dGUmcGFnZT0lMkZhcGklMkZnZW5lcmF0ZUFuZFVwbG9hZEltYWdlJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGZ2VuZXJhdGVBbmRVcGxvYWRJbWFnZSUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDQXJ0RG9jdW1lbnRhdGlvbiU1QzIwMjRfSW1hZ2VFY29sb2d5U2ltdWxhdGlvbiU1Q2Vjb2xvZ3lBUEklNUNzcmMlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUQlM0ElNUNBcnREb2N1bWVudGF0aW9uJTVDMjAyNF9JbWFnZUVjb2xvZ3lTaW11bGF0aW9uJTVDZWNvbG9neUFQSSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDOEQ7QUFDM0k7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90cmVuZHMtYWktZ2VuZXJhdG9yLz83YWVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkQ6XFxcXEFydERvY3VtZW50YXRpb25cXFxcMjAyNF9JbWFnZUVjb2xvZ3lTaW11bGF0aW9uXFxcXGVjb2xvZ3lBUElcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcZ2VuZXJhdGVBbmRVcGxvYWRJbWFnZVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZ2VuZXJhdGVBbmRVcGxvYWRJbWFnZS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2dlbmVyYXRlQW5kVXBsb2FkSW1hZ2VcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2dlbmVyYXRlQW5kVXBsb2FkSW1hZ2Uvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJEOlxcXFxBcnREb2N1bWVudGF0aW9uXFxcXDIwMjRfSW1hZ2VFY29sb2d5U2ltdWxhdGlvblxcXFxlY29sb2d5QVBJXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGdlbmVyYXRlQW5kVXBsb2FkSW1hZ2VcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2dlbmVyYXRlQW5kVXBsb2FkSW1hZ2Uvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2FgenerateAndUploadImage%2Froute&page=%2Fapi%2FgenerateAndUploadImage%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2FgenerateAndUploadImage%2Froute.ts&appDir=D%3A%5CArtDocumentation%5C2024_ImageEcologySimulation%5CecologyAPI%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CArtDocumentation%5C2024_ImageEcologySimulation%5CecologyAPI&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/generateAndUploadImage/route.ts":
/*!*****************************************************!*\
  !*** ./src/app/api/generateAndUploadImage/route.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var cloudinary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cloudinary */ \"(rsc)/./node_modules/cloudinary/cloudinary.js\");\n/* harmony import */ var cloudinary__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cloudinary__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n// app/api/generateAndUpload/route.ts\n\n\n\n// ---------- utils ----------\nfunction dedupLower(arr) {\n    const seen = {};\n    const out = [];\n    for (const t of arr || []){\n        const k = String(t ?? \"\").trim().toLowerCase();\n        if (k && !seen[k]) {\n            seen[k] = true;\n            out.push(String(t).trim());\n        }\n    }\n    return out;\n}\nfunction join(arr, sep = \", \") {\n    if (!arr || !Array.isArray(arr) || arr.length === 0) return \"\";\n    return arr.map((s)=>String(s ?? \"\").trim()).filter(Boolean).join(sep);\n}\nfunction asArray(v) {\n    if (Array.isArray(v)) return v.map(String);\n    if (v == null) return [];\n    // comma-separated string support\n    return String(v).split(\",\").map((s)=>s.trim()).filter(Boolean);\n}\n// ---------- clients ----------\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\ncloudinary__WEBPACK_IMPORTED_MODULE_1__.v2.config({\n    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n    api_key: process.env.CLOUDINARY_API_KEY,\n    api_secret: process.env.CLOUDINARY_API_SECRET\n});\n// ---------- route ----------\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        // Log safely\n        try {\n            console.log(\"attempts remix___:\", body, JSON.stringify(body).slice(0, 500));\n        } catch  {\n            console.log(\"attempts remix: [unserializable body]\");\n        }\n        // #### New rich fields ####\n        const prompt = String(body?.prompt ?? \"\");\n        const adjectives = String(body?.adjectives ?? \"\");\n        const styles = asArray(body?.styles);\n        const communities = asArray(body?.communities);\n        const trends = asArray(body?.trends);\n        const descriptions = asArray(body?.descriptions);\n        const parentIds = asArray(body?.parentIds);\n        const people = asArray(body?.people);\n        // support both \"object\" and \"objects\"\n        const objectsArr = asArray(body?.objects ?? body?.object);\n        // #### Back-compat fields (optional) ####\n        const folder = String(body?.folder ?? \"imageEcology\");\n        const communityFallback = String(body?.community ?? \"\");\n        const titleIn = String(body?.title ?? \"\");\n        const userTagsArr = asArray(body?.tags);\n        // Compose a single, high-signal prompt for the LLM → Image generator\n        const userPrompt = [\n            `You are an image prompt engineer crafting a *single* vivid social media image prompt in English.`,\n            `Source descriptions (merge meanings, avoid literal collage text):`,\n            ...descriptions.map((d)=>`- ${d}`),\n            \"\",\n            `Desired vibe / tags: ${adjectives || \"—\"}`,\n            styles.length ? `Style cues: ${join(styles)}` : \"\",\n            communities.length || communityFallback ? `Community context: ${join(communities.length ? communities : [\n                communityFallback\n            ])}` : \"\",\n            trends.length ? `Trending motifs: ${join(trends)}` : \"\",\n            people.length ? `including: ${join(people)}` : \"\",\n            \"\",\n            `Constraints:`,\n            `- Unify the scene into one coherent world; not a grid.`,\n            `- If multiple styles are present, harmonize rather than list.`\n        ].filter(Boolean).join(\"\\n\");\n        // Prompt expansion (compact, one-line)\n        const completion = await openai.chat.completions.create({\n            model: \"gpt-4o-mini\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"Return a single, compact prompt line suitable for an image model; no preamble; no lists.\"\n                },\n                {\n                    role: \"user\",\n                    content: userPrompt\n                }\n            ],\n            max_tokens: 180,\n            temperature: 0.8\n        });\n        const sentenceRaw = completion.choices?.[0]?.message?.content ?? \"\";\n        const remixedPrompt = sentenceRaw.replaceAll('\"', \"\").trim();\n        const safetySuffix = \"Square image. No text, no UI, no watermark, no signatures.\";\n        console.log(\"makes image from parents: \", sentenceRaw);\n        // Image generation\n        const imageGen = await openai.images.generate({\n            model: \"dall-e-3\",\n            prompt: `${remixedPrompt}\\n${safetySuffix}`.trim(),\n            n: 1,\n            size: \"1024x1024\"\n        });\n        const b64 = imageGen.data?.[0]?.b64_json ?? null;\n        const remoteUrl = imageGen.data?.[0]?.url ?? null;\n        if (!b64 && !remoteUrl) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Image generation returned no data\"\n            }, {\n                status: 502\n            });\n        }\n        const uploadSource = b64 ? `data:image/png;base64,${b64}` : remoteUrl;\n        // Title to store (prefer explicit title, then remixed, then original prompt)\n        const titleToStore = titleIn || remixedPrompt || prompt || \"image\";\n        // Pick one community string to store in context (if arrays present, use first)\n        const communityToStore = communities && communities[0] || communityFallback || \"\";\n        // ---------- Upload to Cloudinary ----------\n        const uploadResult = await cloudinary__WEBPACK_IMPORTED_MODULE_1__.v2.uploader.upload(uploadSource, {\n            folder,\n            context: {\n                alt: titleToStore,\n                caption: titleToStore,\n                parentIds: parentIds.length ? parentIds.join(\",\") : \"\",\n                community: communityToStore\n            },\n            moderation: \"aws_rek:\" + \"explicit_nudity:0.7:\" + \"hate_symbols:0.6:\" + \"suggestive:ignore:\" + \"violence:ignore:\" + \"visually_disturbing:ignore:\" + \"rude_gestures:ignore:\" + \"drugs:ignore:\" + \"tobacco:ignore:\" + \"alcohol:ignore:\" + \"gambling:ignore\"\n        });\n        // Moderation check\n        const moderationArr = uploadResult.moderation;\n        const wasRejected = moderationArr?.some((m)=>m.status === \"rejected\" && m.kind?.startsWith(\"aws_rek\"));\n        if (wasRejected) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"image does not adhere to our policy\"\n            }, {\n                status: 400\n            });\n        }\n        // ---------- Vision enrichment ----------\n        const visionPrompt = `\nYou will be given an image collected in a users social media feed: \"${titleToStore}\".\n\nReturn ONLY minified JSON with these keys:\n{\"title\":\"\",\"caption\":\"\",\"altText\":\"\",\"feeling\":\"\",\"so_me_type\":\"\",\"trend\":\"\",\"style\":\"\",\"tags\":[],\"vibe\":[],\"objects\":[],\"scenes\":[],\"people\":[]}\n\nRules:\n- \"title\": ≤ 7 words, aligned with \"${titleToStore}\" (refine if needed).\n- \"caption\": ≤ 2 sentences.\n- \"altText\": ≤ 15 words, describing neutrally the image.\n- \"so_me_type\": a title that might identify which Social Media Archetype the image might belong to.\n- \"trend\": a title that might identify which viral trend the image belongs to.\n- \"tags\": up to 12 short tags (nouns/adjectives; no hashtags/emojis).\n- \"feeling\": speculate what feelings it might produce / why we look at it.\n- \"objects\": up to 8 concrete things visible.\n- \"style\": sentences describing the image style for reproduction (photograph/illustration/etc., realism, other style notes).\n- \"people\": check if there are faces; describe each; name celebrity if applicable.\n- No extra text; JSON only.`;\n        const vision = await openai.chat.completions.create({\n            model: \"gpt-4o\",\n            temperature: 0.3,\n            response_format: {\n                type: \"json_object\"\n            },\n            max_tokens: 400,\n            messages: [\n                {\n                    role: \"user\",\n                    content: [\n                        {\n                            type: \"text\",\n                            text: visionPrompt\n                        },\n                        {\n                            type: \"image_url\",\n                            image_url: {\n                                url: uploadResult.secure_url\n                            }\n                        }\n                    ]\n                }\n            ]\n        });\n        const raw = vision.choices?.[0]?.message?.content ?? \"{}\";\n        let ai = {};\n        try {\n            ai = JSON.parse(raw);\n        } catch  {\n            ai = {};\n        }\n        const payload = {\n            title: String(ai?.title ?? titleToStore ?? \"\").trim(),\n            caption: String(ai?.caption ?? \"\").trim(),\n            altText: String(ai?.altText ?? \"\").trim(),\n            so_me_type: String(ai?.so_me_type ?? \"\").trim(),\n            feeling: String(ai?.feeling ?? \"\").trim(),\n            trend: String(ai?.trend ?? \"\").trim(),\n            style: String(ai?.style ?? \"\").trim(),\n            people: Array.isArray(ai?.people) ? ai.people.map(String) : [],\n            tags: Array.isArray(ai?.tags) ? ai.tags.map(String) : [],\n            vibe: Array.isArray(ai?.vibe) ? ai.vibe.map(String) : [],\n            objects: Array.isArray(ai?.objects) ? ai.objects.map(String) : [],\n            scenes: Array.isArray(ai?.scenes) ? ai.scenes.map(String) : []\n        };\n        // Merge tags: user adjectives & arrays → vision inference\n        const adjectivesAsTags = asArray(adjectives);\n        const mergedFromVision = dedupLower([\n            ...payload.tags,\n            ...payload.vibe,\n            ...payload.objects,\n            ...payload.scenes,\n            ...objectsArr,\n            ...people,\n            ...styles,\n            ...trends,\n            ...communities\n        ]).slice(0, 25);\n        const finalTags = dedupLower([\n            ...mergedFromVision,\n            ...adjectivesAsTags,\n            ...userTagsArr\n        ]);\n        // Cloudinary expects comma-separated tags when using explicit()\n        const tagsString = finalTags.join(\",\");\n        // ---------- Enrich Cloudinary asset ----------\n        await cloudinary__WEBPACK_IMPORTED_MODULE_1__.v2.uploader.explicit(uploadResult.public_id, {\n            type: \"upload\",\n            tags: tagsString,\n            context: {\n                caption: titleToStore,\n                alt: payload.altText,\n                ai_title: payload.title,\n                ai_style: payload.style,\n                ai_trend: payload.trend,\n                ai_so_me_type: payload.so_me_type,\n                ai_feeling: payload.feeling,\n                ai_vibe: (payload.vibe || []).join(\", \"),\n                ai_objects: (payload.objects || []).slice(0, 5).join(\", \"),\n                community: communityToStore,\n                parentIds: parentIds.join(\",\"),\n                ai_people: payload.people,\n                // also echo inputs for lineage/auditing\n                remix_prompt: remixedPrompt\n            }\n        });\n        // ---------- Response (compatible with your client DTO) ----------\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            url: uploadResult.secure_url,\n            publicId: uploadResult.public_id,\n            title: titleToStore,\n            alt: payload.altText,\n            ai_title: payload.title,\n            ai_vibe: (payload.vibe || []).join(\", \"),\n            ai_objects: (payload.objects || []).slice(0, 5).join(\", \"),\n            ai_style: payload.style,\n            ai_trend: payload.trend,\n            ai_so_me_type: payload.so_me_type,\n            community: communityToStore,\n            tags: finalTags,\n            parentIds: parentIds.length ? parentIds : null,\n            ai_people: payload.people,\n            remixedPrompt,\n            // also return raw inputs for reference\n            inputs: {\n                prompt,\n                adjectives,\n                styles,\n                communities,\n                trends,\n                descriptions,\n                people,\n                objects: objectsArr\n            }\n        });\n    } catch (error) {\n        console.error(\"Generate+Upload error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to generate and upload image\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9nZW5lcmF0ZUFuZFVwbG9hZEltYWdlL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEscUNBQXFDO0FBQ007QUFDRztBQUNsQjtBQUU1Qiw4QkFBOEI7QUFDOUIsU0FBU0ksV0FBV0MsR0FBYTtJQUMvQixNQUFNQyxPQUE2QixDQUFDO0lBQ3BDLE1BQU1DLE1BQWdCLEVBQUU7SUFDeEIsS0FBSyxNQUFNQyxLQUFLSCxPQUFPLEVBQUUsQ0FBRTtRQUN6QixNQUFNSSxJQUFJQyxPQUFPRixLQUFLLElBQ25CRyxJQUFJLEdBQ0pDLFdBQVc7UUFDZCxJQUFJSCxLQUFLLENBQUNILElBQUksQ0FBQ0csRUFBRSxFQUFFO1lBQ2pCSCxJQUFJLENBQUNHLEVBQUUsR0FBRztZQUNWRixJQUFJTSxJQUFJLENBQUNILE9BQU9GLEdBQUdHLElBQUk7UUFDekI7SUFDRjtJQUNBLE9BQU9KO0FBQ1Q7QUFFQSxTQUFTTyxLQUFLVCxHQUFxQixFQUFFVSxNQUFNLElBQUk7SUFDN0MsSUFBSSxDQUFDVixPQUFPLENBQUNXLE1BQU1DLE9BQU8sQ0FBQ1osUUFBUUEsSUFBSWEsTUFBTSxLQUFLLEdBQUcsT0FBTztJQUM1RCxPQUFPYixJQUNKYyxHQUFHLENBQUMsQ0FBQ0MsSUFBTVYsT0FBT1UsS0FBSyxJQUFJVCxJQUFJLElBQy9CVSxNQUFNLENBQUNDLFNBQ1BSLElBQUksQ0FBQ0M7QUFDVjtBQUVBLFNBQVNRLFFBQVFDLENBQVU7SUFDekIsSUFBSVIsTUFBTUMsT0FBTyxDQUFDTyxJQUFJLE9BQU9BLEVBQUVMLEdBQUcsQ0FBQ1Q7SUFDbkMsSUFBSWMsS0FBSyxNQUFNLE9BQU8sRUFBRTtJQUN4QixpQ0FBaUM7SUFDakMsT0FBT2QsT0FBT2MsR0FDWEMsS0FBSyxDQUFDLEtBQ05OLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQSxFQUFFVCxJQUFJLElBQ2pCVSxNQUFNLENBQUNDO0FBQ1o7QUFFQSxnQ0FBZ0M7QUFDaEMsTUFBTUksU0FBUyxJ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cEIsUUFBUWpFLE9BQU8sSUFBSSxFQUFFLEVBQUVWLEtBQUssQ0FBQyxHQUFHLEdBQUdoQyxJQUFJLENBQUM7WUFDckQwSCxVQUFVZixRQUFRSyxLQUFLO1lBQ3ZCVyxVQUFVaEIsUUFBUUksS0FBSztZQUN2QmEsZUFBZWpCLFFBQVFFLFVBQVU7WUFDakMvRCxXQUFXcUM7WUFDWGpDLE1BQU1tRTtZQUNOOUUsV0FBV0EsVUFBVW5DLE1BQU0sR0FBR21DLFlBQVk7WUFDMUN5RixXQUFXckIsUUFBUW5FLE1BQU07WUFDekIwQjtZQUNBLHVDQUF1QztZQUN2Q2lFLFFBQVE7Z0JBQ05sRztnQkFDQUM7Z0JBQ0FDO2dCQUNBQztnQkFDQUM7Z0JBQ0FDO2dCQUNBRTtnQkFDQUUsU0FBU0Q7WUFDWDtRQUNGO0lBQ0YsRUFBRSxPQUFPc0MsT0FBTztRQUNkbkQsUUFBUW1ELEtBQUssQ0FBQywwQkFBMEJBO1FBQ3hDLE9BQU83RixxREFBWUEsQ0FBQ3lDLElBQUksQ0FDdEI7WUFBRW9ELE9BQU87UUFBc0MsR0FDL0M7WUFBRUMsUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90cmVuZHMtYWktZ2VuZXJhdG9yLy4vc3JjL2FwcC9hcGkvZ2VuZXJhdGVBbmRVcGxvYWRJbWFnZS9yb3V0ZS50cz81NTE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGFwcC9hcGkvZ2VuZXJhdGVBbmRVcGxvYWQvcm91dGUudHNcbmltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xuaW1wb3J0IHsgdjIgYXMgY2xvdWRpbmFyeSB9IGZyb20gXCJjbG91ZGluYXJ5XCI7XG5pbXBvcnQgT3BlbkFJIGZyb20gXCJvcGVuYWlcIjtcblxuLy8gLS0tLS0tLS0tLSB1dGlscyAtLS0tLS0tLS0tXG5mdW5jdGlvbiBkZWR1cExvd2VyKGFycjogc3RyaW5nW10pIHtcbiAgY29uc3Qgc2VlbjogUmVjb3JkPHN0cmluZywgdHJ1ZT4gPSB7fTtcbiAgY29uc3Qgb3V0OiBzdHJpbmdbXSA9IFtdO1xuICBmb3IgKGNvbnN0IHQgb2YgYXJyIHx8IFtdKSB7XG4gICAgY29uc3QgayA9IFN0cmluZyh0ID8/IFwiXCIpXG4gICAgICAudHJpbSgpXG4gICAgICAudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoayAmJiAhc2VlbltrXSkge1xuICAgICAgc2VlbltrXSA9IHRydWU7XG4gICAgICBvdXQucHVzaChTdHJpbmcodCkudHJpbSgpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gam9pbihhcnI/OiBzdHJpbmdbXSB8IG51bGwsIHNlcCA9IFwiLCBcIikge1xuICBpZiAoIWFyciB8fCAhQXJyYXkuaXNBcnJheShhcnIpIHx8IGFyci5sZW5ndGggPT09IDApIHJldHVybiBcIlwiO1xuICByZXR1cm4gYXJyXG4gICAgLm1hcCgocykgPT4gU3RyaW5nKHMgPz8gXCJcIikudHJpbSgpKVxuICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAuam9pbihzZXApO1xufVxuXG5mdW5jdGlvbiBhc0FycmF5KHY6IHVua25vd24pOiBzdHJpbmdbXSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHYpKSByZXR1cm4gdi5tYXAoU3RyaW5nKTtcbiAgaWYgKHYgPT0gbnVsbCkgcmV0dXJuIFtdO1xuICAvLyBjb21tYS1zZXBhcmF0ZWQgc3RyaW5nIHN1cHBvcnRcbiAgcmV0dXJuIFN0cmluZyh2KVxuICAgIC5zcGxpdChcIixcIilcbiAgICAubWFwKChzKSA9PiBzLnRyaW0oKSlcbiAgICAuZmlsdGVyKEJvb2xlYW4pO1xufVxuXG4vLyAtLS0tLS0tLS0tIGNsaWVudHMgLS0tLS0tLS0tLVxuY29uc3Qgb3BlbmFpID0gbmV3IE9wZW5BSSh7XG4gIGFwaUtleTogcHJvY2Vzcy5lbnYuT1BFTkFJX0FQSV9LRVksXG59KTtcblxuY2xvdWRpbmFyeS5jb25maWcoe1xuICBjbG91ZF9uYW1lOiBwcm9jZXNzLmVudi5DTE9VRElOQVJZX0NMT1VEX05BTUUsXG4gIGFwaV9rZXk6IHByb2Nlc3MuZW52LkNMT1VESU5BUllfQVBJX0tFWSxcbiAgYXBpX3NlY3JldDogcHJvY2Vzcy5lbnYuQ0xPVURJTkFSWV9BUElfU0VDUkVULFxufSk7XG5cbi8vIC0tLS0tLS0tLS0gcm91dGUgLS0tLS0tLS0tLVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogUmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcblxuICAgIC8vIExvZyBzYWZlbHlcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coXCJhdHRlbXB0cyByZW1peF9fXzpcIiwgYm9keSwgSlNPTi5zdHJpbmdpZnkoYm9keSkuc2xpY2UoMCwgNTAwKSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICBjb25zb2xlLmxvZyhcImF0dGVtcHRzIHJlbWl4OiBbdW5zZXJpYWxpemFibGUgYm9keV1cIik7XG4gICAgfVxuXG4gICAgLy8gIyMjIyBOZXcgcmljaCBmaWVsZHMgIyMjI1xuICAgIGNvbnN0IHByb21wdDogc3RyaW5nID0gU3RyaW5nKGJvZHk/LnByb21wdCA/PyBcIlwiKTtcbiAgICBjb25zdCBhZGplY3RpdmVzOiBzdHJpbmcgPSBTdHJpbmcoYm9keT8uYWRqZWN0aXZlcyA/PyBcIlwiKTtcbiAgICBjb25zdCBzdHlsZXM6IHN0cmluZ1tdID0gYXNBcnJheShib2R5Py5zdHlsZXMpO1xuICAgIGNvbnN0IGNvbW11bml0aWVzOiBzdHJpbmdbXSA9IGFzQXJyYXkoYm9keT8uY29tbXVuaXRpZXMpO1xuICAgIGNvbnN0IHRyZW5kczogc3RyaW5nW10gPSBhc0FycmF5KGJvZHk/LnRyZW5kcyk7XG4gICAgY29uc3QgZGVzY3JpcHRpb25zOiBzdHJpbmdbXSA9IGFzQXJyYXkoYm9keT8uZGVzY3JpcHRpb25zKTtcbiAgICBjb25zdCBwYXJlbnRJZHM6IHN0cmluZ1tdID0gYXNBcnJheShib2R5Py5wYXJlbnRJZHMpO1xuICAgIGNvbnN0IHBlb3BsZTogc3RyaW5nW10gPSBhc0FycmF5KGJvZHk/LnBlb3BsZSk7XG4gICAgLy8gc3VwcG9ydCBib3RoIFwib2JqZWN0XCIgYW5kIFwib2JqZWN0c1wiXG4gICAgY29uc3Qgb2JqZWN0c0Fycjogc3RyaW5nW10gPSBhc0FycmF5KGJvZHk/Lm9iamVjdHMgPz8gYm9keT8ub2JqZWN0KTtcblxuICAgIC8vICMjIyMgQmFjay1jb21wYXQgZmllbGRzIChvcHRpb25hbCkgIyMjI1xuICAgIGNvbnN0IGZvbGRlcjogc3RyaW5nID0gU3RyaW5nKGJvZHk/LmZvbGRlciA/PyBcImltYWdlRWNvbG9neVwiKTtcbiAgICBjb25zdCBjb21tdW5pdHlGYWxsYmFjazogc3RyaW5nID0gU3RyaW5nKGJvZHk/LmNvbW11bml0eSA/PyBcIlwiKTtcbiAgICBjb25zdCB0aXRsZUluOiBzdHJpbmcgPSBTdHJpbmcoYm9keT8udGl0bGUgPz8gXCJcIik7XG4gICAgY29uc3QgdXNlclRhZ3NBcnI6IHN0cmluZ1tdID0gYXNBcnJheShib2R5Py50YWdzKTtcblxuICAgIC8vIENvbXBvc2UgYSBzaW5nbGUsIGhpZ2gtc2lnbmFsIHByb21wdCBmb3IgdGhlIExMTSDihpIgSW1hZ2UgZ2VuZXJhdG9yXG4gICAgY29uc3QgdXNlclByb21wdCA9IFtcbiAgICAgIGBZb3UgYXJlIGFuIGltYWdlIHByb21wdCBlbmdpbmVlciBjcmFmdGluZyBhICpzaW5nbGUqIHZpdmlkIHNvY2lhbCBtZWRpYSBpbWFnZSBwcm9tcHQgaW4gRW5nbGlzaC5gLFxuICAgICAgYFNvdXJjZSBkZXNjcmlwdGlvbnMgKG1lcmdlIG1lYW5pbmdzLCBhdm9pZCBsaXRlcmFsIGNvbGxhZ2UgdGV4dCk6YCxcbiAgICAgIC4uLmRlc2NyaXB0aW9ucy5tYXAoKGQpID0+IGAtICR7ZH1gKSxcbiAgICAgIFwiXCIsXG4gICAgICBgRGVzaXJlZCB2aWJlIC8gdGFnczogJHthZGplY3RpdmVzIHx8IFwi4oCUXCJ9YCxcbiAgICAgIHN0eWxlcy5sZW5ndGggPyBgU3R5bGUgY3VlczogJHtqb2luKHN0eWxlcyl9YCA6IFwiXCIsXG4gICAgICBjb21tdW5pdGllcy5sZW5ndGggfHwgY29tbXVuaXR5RmFsbGJhY2tcbiAgICAgICAgPyBgQ29tbXVuaXR5IGNvbnRleHQ6ICR7am9pbihcbiAgICAgICAgICAgIGNvbW11bml0aWVzLmxlbmd0aCA/IGNvbW11bml0aWVzIDogW2NvbW11bml0eUZhbGxiYWNrXVxuICAgICAgICAgICl9YFxuICAgICAgICA6IFwiXCIsXG4gICAgICB0cmVuZHMubGVuZ3RoID8gYFRyZW5kaW5nIG1vdGlmczogJHtqb2luKHRyZW5kcyl9YCA6IFwiXCIsXG4gICAgICBwZW9wbGUubGVuZ3RoID8gYGluY2x1ZGluZzogJHtqb2luKHBlb3BsZSl9YCA6IFwiXCIsXG4gICAgICBcIlwiLFxuICAgICAgYENvbnN0cmFpbnRzOmAsXG4gICAgICBgLSBVbmlmeSB0aGUgc2NlbmUgaW50byBvbmUgY29oZXJlbnQgd29ybGQ7IG5vdCBhIGdyaWQuYCxcbiAgICAgIGAtIElmIG11bHRpcGxlIHN0eWxlcyBhcmUgcHJlc2VudCwgaGFybW9uaXplIHJhdGhlciB0aGFuIGxpc3QuYCxcbiAgICBdXG4gICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAuam9pbihcIlxcblwiKTtcblxuICAgIC8vIFByb21wdCBleHBhbnNpb24gKGNvbXBhY3QsIG9uZS1saW5lKVxuICAgIGNvbnN0IGNvbXBsZXRpb24gPSBhd2FpdCBvcGVuYWkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUoe1xuICAgICAgbW9kZWw6IFwiZ3B0LTRvLW1pbmlcIiwgLy8gY29tcGFjdCArIGNhcGFibGVcbiAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICByb2xlOiBcInN5c3RlbVwiLFxuICAgICAgICAgIGNvbnRlbnQ6XG4gICAgICAgICAgICBcIlJldHVybiBhIHNpbmdsZSwgY29tcGFjdCBwcm9tcHQgbGluZSBzdWl0YWJsZSBmb3IgYW4gaW1hZ2UgbW9kZWw7IG5vIHByZWFtYmxlOyBubyBsaXN0cy5cIixcbiAgICAgICAgfSxcbiAgICAgICAgeyByb2xlOiBcInVzZXJcIiwgY29udGVudDogdXNlclByb21wdCB9LFxuICAgICAgXSxcbiAgICAgIG1heF90b2tlbnM6IDE4MCxcbiAgICAgIHRlbXBlcmF0dXJlOiAwLjgsXG4gICAgfSk7XG5cbiAgICBjb25zdCBzZW50ZW5jZVJhdyA9IGNvbXBsZXRpb24uY2hvaWNlcz8uWzBdPy5tZXNzYWdlPy5jb250ZW50ID8/IFwiXCI7XG4gICAgY29uc3QgcmVtaXhlZFByb21wdCA9IHNlbnRlbmNlUmF3LnJlcGxhY2VBbGwoJ1wiJywgXCJcIikudHJpbSgpO1xuXG4gICAgY29uc3Qgc2FmZXR5U3VmZml4ID1cbiAgICAgIFwiU3F1YXJlIGltYWdlLiBObyB0ZXh0LCBubyBVSSwgbm8gd2F0ZXJtYXJrLCBubyBzaWduYXR1cmVzLlwiO1xuXG4gICAgY29uc29sZS5sb2coXCJtYWtlcyBpbWFnZSBmcm9tIHBhcmVudHM6IFwiLCBzZW50ZW5jZVJhdyk7XG5cbiAgICAvLyBJbWFnZSBnZW5lcmF0aW9uXG4gICAgY29uc3QgaW1hZ2VHZW4gPSBhd2FpdCBvcGVuYWkuaW1hZ2VzLmdlbmVyYXRlKHtcbiAgICAgIG1vZGVsOiBcImRhbGwtZS0zXCIsXG4gICAgICBwcm9tcHQ6IGAke3JlbWl4ZWRQcm9tcHR9XFxuJHtzYWZldHlTdWZmaXh9YC50cmltKCksXG4gICAgICBuOiAxLFxuICAgICAgc2l6ZTogXCIxMDI0eDEwMjRcIixcbiAgICB9KTtcblxuICAgIGNvbnN0IGI2NCA9IGltYWdlR2VuLmRhdGE/LlswXT8uYjY0X2pzb24gPz8gbnVsbDtcbiAgICBjb25zdCByZW1vdGVVcmwgPSBpbWFnZUdlbi5kYXRhPy5bMF0/LnVybCA/PyBudWxsO1xuICAgIGlmICghYjY0ICYmICFyZW1vdGVVcmwpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogXCJJbWFnZSBnZW5lcmF0aW9uIHJldHVybmVkIG5vIGRhdGFcIiB9LFxuICAgICAgICB7IHN0YXR1czogNTAyIH1cbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHVwbG9hZFNvdXJjZSA9IGI2NFxuICAgICAgPyBgZGF0YTppbWFnZS9wbmc7YmFzZTY0LCR7YjY0fWBcbiAgICAgIDogKHJlbW90ZVVybCBhcyBzdHJpbmcpO1xuXG4gICAgLy8gVGl0bGUgdG8gc3RvcmUgKHByZWZlciBleHBsaWNpdCB0aXRsZSwgdGhlbiByZW1peGVkLCB0aGVuIG9yaWdpbmFsIHByb21wdClcbiAgICBjb25zdCB0aXRsZVRvU3RvcmUgPSB0aXRsZUluIHx8IHJlbWl4ZWRQcm9tcHQgfHwgcHJvbXB0IHx8IFwiaW1hZ2VcIjtcblxuICAgIC8vIFBpY2sgb25lIGNvbW11bml0eSBzdHJpbmcgdG8gc3RvcmUgaW4gY29udGV4dCAoaWYgYXJyYXlzIHByZXNlbnQsIHVzZSBmaXJzdClcbiAgICBjb25zdCBjb21tdW5pdHlUb1N0b3JlID1cbiAgICAgIChjb21tdW5pdGllcyAmJiBjb21tdW5pdGllc1swXSkgfHwgY29tbXVuaXR5RmFsbGJhY2sgfHwgXCJcIjtcblxuICAgIC8vIC0tLS0tLS0tLS0gVXBsb2FkIHRvIENsb3VkaW5hcnkgLS0tLS0tLS0tLVxuICAgIGNvbnN0IHVwbG9hZFJlc3VsdCA9IGF3YWl0IGNsb3VkaW5hcnkudXBsb2FkZXIudXBsb2FkKHVwbG9hZFNvdXJjZSwge1xuICAgICAgZm9sZGVyLFxuICAgICAgY29udGV4dDoge1xuICAgICAgICBhbHQ6IHRpdGxlVG9TdG9yZSxcbiAgICAgICAgY2FwdGlvbjogdGl0bGVUb1N0b3JlLFxuICAgICAgICBwYXJlbnRJZHM6IHBhcmVudElkcy5sZW5ndGggPyBwYXJlbnRJZHMuam9pbihcIixcIikgOiBcIlwiLFxuICAgICAgICBjb21tdW5pdHk6IGNvbW11bml0eVRvU3RvcmUsXG4gICAgICB9LFxuICAgICAgbW9kZXJhdGlvbjpcbiAgICAgICAgXCJhd3NfcmVrOlwiICtcbiAgICAgICAgXCJleHBsaWNpdF9udWRpdHk6MC43OlwiICtcbiAgICAgICAgXCJoYXRlX3N5bWJvbHM6MC42OlwiICtcbiAgICAgICAgXCJzdWdnZXN0aXZlOmlnbm9yZTpcIiArXG4gICAgICAgIFwidmlvbGVuY2U6aWdub3JlOlwiICtcbiAgICAgICAgXCJ2aXN1YWxseV9kaXN0dXJiaW5nOmlnbm9yZTpcIiArXG4gICAgICAgIFwicnVkZV9nZXN0dXJlczppZ25vcmU6XCIgK1xuICAgICAgICBcImRydWdzOmlnbm9yZTpcIiArXG4gICAgICAgIFwidG9iYWNjbzppZ25vcmU6XCIgK1xuICAgICAgICBcImFsY29ob2w6aWdub3JlOlwiICtcbiAgICAgICAgXCJnYW1ibGluZzppZ25vcmVcIixcbiAgICB9KTtcblxuICAgIC8vIE1vZGVyYXRpb24gY2hlY2tcbiAgICBjb25zdCBtb2RlcmF0aW9uQXJyID0gKHVwbG9hZFJlc3VsdCBhcyBhbnkpLm1vZGVyYXRpb24gYXNcbiAgICAgIHwge1xuICAgICAgICAgIHN0YXR1czogc3RyaW5nO1xuICAgICAgICAgIGtpbmQ6IHN0cmluZztcbiAgICAgICAgICBpbmZvPzogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgICAgICAgfVtdXG4gICAgICB8IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0IHdhc1JlamVjdGVkID0gbW9kZXJhdGlvbkFycj8uc29tZShcbiAgICAgIChtKSA9PiBtLnN0YXR1cyA9PT0gXCJyZWplY3RlZFwiICYmIG0ua2luZD8uc3RhcnRzV2l0aChcImF3c19yZWtcIilcbiAgICApO1xuICAgIGlmICh3YXNSZWplY3RlZCkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiBcImltYWdlIGRvZXMgbm90IGFkaGVyZSB0byBvdXIgcG9saWN5XCIgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIC0tLS0tLS0tLS0gVmlzaW9uIGVucmljaG1lbnQgLS0tLS0tLS0tLVxuICAgIGNvbnN0IHZpc2lvblByb21wdCA9IGBcbllvdSB3aWxsIGJlIGdpdmVuIGFuIGltYWdlIGNvbGxlY3RlZCBpbiBhIHVzZXJzIHNvY2lhbCBtZWRpYSBmZWVkOiBcIiR7dGl0bGVUb1N0b3JlfVwiLlxuXG5SZXR1cm4gT05MWSBtaW5pZmllZCBKU09OIHdpdGggdGhlc2Uga2V5czpcbntcInRpdGxlXCI6XCJcIixcImNhcHRpb25cIjpcIlwiLFwiYWx0VGV4dFwiOlwiXCIsXCJmZWVsaW5nXCI6XCJcIixcInNvX21lX3R5cGVcIjpcIlwiLFwidHJlbmRcIjpcIlwiLFwic3R5bGVcIjpcIlwiLFwidGFnc1wiOltdLFwidmliZVwiOltdLFwib2JqZWN0c1wiOltdLFwic2NlbmVzXCI6W10sXCJwZW9wbGVcIjpbXX1cblxuUnVsZXM6XG4tIFwidGl0bGVcIjog4omkIDcgd29yZHMsIGFsaWduZWQgd2l0aCBcIiR7dGl0bGVUb1N0b3JlfVwiIChyZWZpbmUgaWYgbmVlZGVkKS5cbi0gXCJjYXB0aW9uXCI6IOKJpCAyIHNlbnRlbmNlcy5cbi0gXCJhbHRUZXh0XCI6IOKJpCAxNSB3b3JkcywgZGVzY3JpYmluZyBuZXV0cmFsbHkgdGhlIGltYWdlLlxuLSBcInNvX21lX3R5cGVcIjogYSB0aXRsZSB0aGF0IG1pZ2h0IGlkZW50aWZ5IHdoaWNoIFNvY2lhbCBNZWRpYSBBcmNoZXR5cGUgdGhlIGltYWdlIG1pZ2h0IGJlbG9uZyB0by5cbi0gXCJ0cmVuZFwiOiBhIHRpdGxlIHRoYXQgbWlnaHQgaWRlbnRpZnkgd2hpY2ggdmlyYWwgdHJlbmQgdGhlIGltYWdlIGJlbG9uZ3MgdG8uXG4tIFwidGFnc1wiOiB1cCB0byAxMiBzaG9ydCB0YWdzIChub3Vucy9hZGplY3RpdmVzOyBubyBoYXNodGFncy9lbW9qaXMpLlxuLSBcImZlZWxpbmdcIjogc3BlY3VsYXRlIHdoYXQgZmVlbGluZ3MgaXQgbWlnaHQgcHJvZHVjZSAvIHdoeSB3ZSBsb29rIGF0IGl0LlxuLSBcIm9iamVjdHNcIjogdXAgdG8gOCBjb25jcmV0ZSB0aGluZ3MgdmlzaWJsZS5cbi0gXCJzdHlsZVwiOiBzZW50ZW5jZXMgZGVzY3JpYmluZyB0aGUgaW1hZ2Ugc3R5bGUgZm9yIHJlcHJvZHVjdGlvbiAocGhvdG9ncmFwaC9pbGx1c3RyYXRpb24vZXRjLiwgcmVhbGlzbSwgb3RoZXIgc3R5bGUgbm90ZXMpLlxuLSBcInBlb3BsZVwiOiBjaGVjayBpZiB0aGVyZSBhcmUgZmFjZXM7IGRlc2NyaWJlIGVhY2g7IG5hbWUgY2VsZWJyaXR5IGlmIGFwcGxpY2FibGUuXG4tIE5vIGV4dHJhIHRleHQ7IEpTT04gb25seS5gO1xuXG4gICAgY29uc3QgdmlzaW9uID0gYXdhaXQgb3BlbmFpLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAgICAgIG1vZGVsOiBcImdwdC00b1wiLFxuICAgICAgdGVtcGVyYXR1cmU6IDAuMyxcbiAgICAgIHJlc3BvbnNlX2Zvcm1hdDogeyB0eXBlOiBcImpzb25fb2JqZWN0XCIgfSxcbiAgICAgIG1heF90b2tlbnM6IDQwMCxcbiAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICByb2xlOiBcInVzZXJcIixcbiAgICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgICB7IHR5cGU6IFwidGV4dFwiLCB0ZXh0OiB2aXNpb25Qcm9tcHQgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdHlwZTogXCJpbWFnZV91cmxcIixcbiAgICAgICAgICAgICAgaW1hZ2VfdXJsOiB7IHVybDogdXBsb2FkUmVzdWx0LnNlY3VyZV91cmwgYXMgc3RyaW5nIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgY29uc3QgcmF3ID0gdmlzaW9uLmNob2ljZXM/LlswXT8ubWVzc2FnZT8uY29udGVudCA/PyBcInt9XCI7XG4gICAgbGV0IGFpOiBhbnkgPSB7fTtcbiAgICB0cnkge1xuICAgICAgYWkgPSBKU09OLnBhcnNlKHJhdyk7XG4gICAgfSBjYXRjaCB7XG4gICAgICBhaSA9IHt9O1xuICAgIH1cblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICB0aXRsZTogU3RyaW5nKGFpPy50aXRsZSA/PyB0aXRsZVRvU3RvcmUgPz8gXCJcIikudHJpbSgpLFxuICAgICAgY2FwdGlvbjogU3RyaW5nKGFpPy5jYXB0aW9uID8/IFwiXCIpLnRyaW0oKSxcbiAgICAgIGFsdFRleHQ6IFN0cmluZyhhaT8uYWx0VGV4dCA/PyBcIlwiKS50cmltKCksXG4gICAgICBzb19tZV90eXBlOiBTdHJpbmcoYWk/LnNvX21lX3R5cGUgPz8gXCJcIikudHJpbSgpLFxuICAgICAgZmVlbGluZzogU3RyaW5nKGFpPy5mZWVsaW5nID8/IFwiXCIpLnRyaW0oKSxcbiAgICAgIHRyZW5kOiBTdHJpbmcoYWk/LnRyZW5kID8/IFwiXCIpLnRyaW0oKSxcbiAgICAgIHN0eWxlOiBTdHJpbmcoYWk/LnN0eWxlID8/IFwiXCIpLnRyaW0oKSxcbiAgICAgIHBlb3BsZTogQXJyYXkuaXNBcnJheShhaT8ucGVvcGxlKSA/IGFpLnBlb3BsZS5tYXAoU3RyaW5nKSA6IFtdLFxuICAgICAgdGFnczogQXJyYXkuaXNBcnJheShhaT8udGFncykgPyBhaS50YWdzLm1hcChTdHJpbmcpIDogW10sXG4gICAgICB2aWJlOiBBcnJheS5pc0FycmF5KGFpPy52aWJlKSA/IGFpLnZpYmUubWFwKFN0cmluZykgOiBbXSxcbiAgICAgIG9iamVjdHM6IEFycmF5LmlzQXJyYXkoYWk/Lm9iamVjdHMpID8gYWkub2JqZWN0cy5tYXAoU3RyaW5nKSA6IFtdLFxuICAgICAgc2NlbmVzOiBBcnJheS5pc0FycmF5KGFpPy5zY2VuZXMpID8gYWkuc2NlbmVzLm1hcChTdHJpbmcpIDogW10sXG4gICAgfTtcblxuICAgIC8vIE1lcmdlIHRhZ3M6IHVzZXIgYWRqZWN0aXZlcyAmIGFycmF5cyDihpIgdmlzaW9uIGluZmVyZW5jZVxuICAgIGNvbnN0IGFkamVjdGl2ZXNBc1RhZ3MgPSBhc0FycmF5KGFkamVjdGl2ZXMpO1xuICAgIGNvbnN0IG1lcmdlZEZyb21WaXNpb24gPSBkZWR1cExvd2VyKFtcbiAgICAgIC4uLnBheWxvYWQudGFncyxcbiAgICAgIC4uLnBheWxvYWQudmliZSxcbiAgICAgIC4uLnBheWxvYWQub2JqZWN0cyxcbiAgICAgIC4uLnBheWxvYWQuc2NlbmVzLFxuICAgICAgLi4ub2JqZWN0c0FycixcbiAgICAgIC4uLnBlb3BsZSxcbiAgICAgIC4uLnN0eWxlcyxcbiAgICAgIC4uLnRyZW5kcyxcbiAgICAgIC4uLmNvbW11bml0aWVzLFxuICAgIF0pLnNsaWNlKDAsIDI1KTtcblxuICAgIGNvbnN0IGZpbmFsVGFncyA9IGRlZHVwTG93ZXIoW1xuICAgICAgLi4ubWVyZ2VkRnJvbVZpc2lvbixcbiAgICAgIC4uLmFkamVjdGl2ZXNBc1RhZ3MsXG4gICAgICAuLi51c2VyVGFnc0FycixcbiAgICBdKTtcblxuICAgIC8vIENsb3VkaW5hcnkgZXhwZWN0cyBjb21tYS1zZXBhcmF0ZWQgdGFncyB3aGVuIHVzaW5nIGV4cGxpY2l0KClcbiAgICBjb25zdCB0YWdzU3RyaW5nID0gZmluYWxUYWdzLmpvaW4oXCIsXCIpO1xuXG4gICAgLy8gLS0tLS0tLS0tLSBFbnJpY2ggQ2xvdWRpbmFyeSBhc3NldCAtLS0tLS0tLS0tXG4gICAgYXdhaXQgY2xvdWRpbmFyeS51cGxvYWRlci5leHBsaWNpdCh1cGxvYWRSZXN1bHQucHVibGljX2lkLCB7XG4gICAgICB0eXBlOiBcInVwbG9hZFwiLFxuICAgICAgdGFnczogdGFnc1N0cmluZyxcbiAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgY2FwdGlvbjogdGl0bGVUb1N0b3JlLFxuICAgICAgICBhbHQ6IHBheWxvYWQuYWx0VGV4dCxcbiAgICAgICAgYWlfdGl0bGU6IHBheWxvYWQudGl0bGUsXG4gICAgICAgIGFpX3N0eWxlOiBwYXlsb2FkLnN0eWxlLFxuICAgICAgICBhaV90cmVuZDogcGF5bG9hZC50cmVuZCxcbiAgICAgICAgYWlfc29fbWVfdHlwZTogcGF5bG9hZC5zb19tZV90eXBlLFxuICAgICAgICBhaV9mZWVsaW5nOiBwYXlsb2FkLmZlZWxpbmcsXG4gICAgICAgIGFpX3ZpYmU6IChwYXlsb2FkLnZpYmUgfHwgW10pLmpvaW4oXCIsIFwiKSxcbiAgICAgICAgYWlfb2JqZWN0czogKHBheWxvYWQub2JqZWN0cyB8fCBbXSkuc2xpY2UoMCwgNSkuam9pbihcIiwgXCIpLFxuICAgICAgICBjb21tdW5pdHk6IGNvbW11bml0eVRvU3RvcmUsXG4gICAgICAgIHBhcmVudElkczogcGFyZW50SWRzLmpvaW4oXCIsXCIpLFxuICAgICAgICBhaV9wZW9wbGU6IHBheWxvYWQucGVvcGxlLFxuICAgICAgICAvLyBhbHNvIGVjaG8gaW5wdXRzIGZvciBsaW5lYWdlL2F1ZGl0aW5nXG4gICAgICAgIHJlbWl4X3Byb21wdDogcmVtaXhlZFByb21wdCxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyAtLS0tLS0tLS0tIFJlc3BvbnNlIChjb21wYXRpYmxlIHdpdGggeW91ciBjbGllbnQgRFRPKSAtLS0tLS0tLS0tXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHVybDogdXBsb2FkUmVzdWx0LnNlY3VyZV91cmwsXG4gICAgICBwdWJsaWNJZDogdXBsb2FkUmVzdWx0LnB1YmxpY19pZCxcbiAgICAgIHRpdGxlOiB0aXRsZVRvU3RvcmUsXG4gICAgICBhbHQ6IHBheWxvYWQuYWx0VGV4dCxcbiAgICAgIGFpX3RpdGxlOiBwYXlsb2FkLnRpdGxlLFxuICAgICAgYWlfdmliZTogKHBheWxvYWQudmliZSB8fCBbXSkuam9pbihcIiwgXCIpLFxuICAgICAgYWlfb2JqZWN0czogKHBheWxvYWQub2JqZWN0cyB8fCBbXSkuc2xpY2UoMCwgNSkuam9pbihcIiwgXCIpLFxuICAgICAgYWlfc3R5bGU6IHBheWxvYWQuc3R5bGUsXG4gICAgICBhaV90cmVuZDogcGF5bG9hZC50cmVuZCxcbiAgICAgIGFpX3NvX21lX3R5cGU6IHBheWxvYWQuc29fbWVfdHlwZSxcbiAgICAgIGNvbW11bml0eTogY29tbXVuaXR5VG9TdG9yZSxcbiAgICAgIHRhZ3M6IGZpbmFsVGFncywgLy8gYXJyYXlcbiAgICAgIHBhcmVudElkczogcGFyZW50SWRzLmxlbmd0aCA/IHBhcmVudElkcyA6IG51bGwsXG4gICAgICBhaV9wZW9wbGU6IHBheWxvYWQucGVvcGxlLFxuICAgICAgcmVtaXhlZFByb21wdCwgLy8gaGFuZHkgZm9yIFVJL2V4dHJhc1xuICAgICAgLy8gYWxzbyByZXR1cm4gcmF3IGlucHV0cyBmb3IgcmVmZXJlbmNlXG4gICAgICBpbnB1dHM6IHtcbiAgICAgICAgcHJvbXB0LFxuICAgICAgICBhZGplY3RpdmVzLFxuICAgICAgICBzdHlsZXMsXG4gICAgICAgIGNvbW11bml0aWVzLFxuICAgICAgICB0cmVuZHMsXG4gICAgICAgIGRlc2NyaXB0aW9ucyxcbiAgICAgICAgcGVvcGxlLFxuICAgICAgICBvYmplY3RzOiBvYmplY3RzQXJyLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiR2VuZXJhdGUrVXBsb2FkIGVycm9yOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogXCJGYWlsZWQgdG8gZ2VuZXJhdGUgYW5kIHVwbG9hZCBpbWFnZVwiIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59XG4iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwidjIiLCJjbG91ZGluYXJ5IiwiT3BlbkFJIiwiZGVkdXBMb3dlciIsImFyciIsInNlZW4iLCJvdXQiLCJ0IiwiayIsIlN0cmluZyIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsInB1c2giLCJqb2luIiwic2VwIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwibWFwIiwicyIsImZpbHRlciIsIkJvb2xlYW4iLCJhc0FycmF5IiwidiIsInNwbGl0Iiwib3BlbmFpIiwiYXBpS2V5IiwicHJvY2VzcyIsImVudiIsIk9QRU5BSV9BUElfS0VZIiwiY29uZmlnIiwiY2xvdWRfbmFtZSIsIkNMT1VESU5BUllfQ0xPVURfTkFNRSIsImFwaV9rZXkiLCJDTE9VRElOQVJZX0FQSV9LRVkiLCJhcGlfc2VjcmV0IiwiQ0xPVURJTkFSWV9BUElfU0VDUkVUIiwiUE9TVCIsInJlcXVlc3QiLCJib2R5IiwianNvbiIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5Iiwic2xpY2UiLCJwcm9tcHQiLCJhZGplY3RpdmVzIiwic3R5bGVzIiwiY29tbXVuaXRpZXMiLCJ0cmVuZHMiLCJkZXNjcmlwdGlvbnMiLCJwYXJlbnRJZHMiLCJwZW9wbGUiLCJvYmplY3RzQXJyIiwib2JqZWN0cyIsIm9iamVjdCIsImZvbGRlciIsImNvbW11bml0eUZhbGxiYWNrIiwiY29tbXVuaXR5IiwidGl0bGVJbiIsInRpdGxlIiwidXNlclRhZ3NBcnIiLCJ0YWdzIiwidXNlclByb21wdCIsImQiLCJjb21wbGV0aW9uIiwiY2hhdCIsImNvbXBsZXRpb25zIiwiY3JlYXRlIiwibW9kZWwiLCJtZXNzYWdlcyIsInJvbGUiLCJjb250ZW50IiwibWF4X3Rva2VucyIsInRlbXBlcmF0dXJlIiwic2VudGVuY2VSYXciLCJjaG9pY2VzIiwibWVzc2FnZSIsInJlbWl4ZWRQcm9tcHQiLCJyZXBsYWNlQWxsIiwic2FmZXR5U3VmZml4IiwiaW1hZ2VHZW4iLCJpbWFnZXMiLCJnZW5lcmF0ZSIsIm4iLCJzaXplIiwiYjY0IiwiZGF0YSIsImI2NF9qc29uIiwicmVtb3RlVXJsIiwidXJsIiwiZXJyb3IiLCJzdGF0dXMiLCJ1cGxvYWRTb3VyY2UiLCJ0aXRsZVRvU3RvcmUiLCJjb21tdW5pdHlUb1N0b3JlIiwidXBsb2FkUmVzdWx0IiwidXBsb2FkZXIiLCJ1cGxvYWQiLCJjb250ZXh0IiwiYWx0IiwiY2FwdGlvbiIsIm1vZGVyYXRpb24iLCJtb2RlcmF0aW9uQXJyIiwid2FzUmVqZWN0ZWQiLCJzb21lIiwibSIsImtpbmQiLCJzdGFydHNXaXRoIiwidmlzaW9uUHJvbXB0IiwidmlzaW9uIiwicmVzcG9uc2VfZm9ybWF0IiwidHlwZSIsInRleHQiLCJpbWFnZV91cmwiLCJzZWN1cmVfdXJsIiwicmF3IiwiYWkiLCJwYXJzZSIsInBheWxvYWQiLCJhbHRUZXh0Iiwic29fbWVfdHlwZSIsImZlZWxpbmciLCJ0cmVuZCIsInN0eWxlIiwidmliZSIsInNjZW5lcyIsImFkamVjdGl2ZXNBc1RhZ3MiLCJtZXJnZWRGcm9tVmlzaW9uIiwiZmluYWxUYWdzIiwidGFnc1N0cmluZyIsImV4cGxpY2l0IiwicHVibGljX2lkIiwiYWlfdGl0bGUiLCJhaV9zdHlsZSIsImFpX3RyZW5kIiwiYWlfc29fbWVfdHlwZSIsImFpX2ZlZWxpbmciLCJhaV92aWJlIiwiYWlfb2JqZWN0cyIsImFpX3Blb3BsZSIsInJlbWl4X3Byb21wdCIsInB1YmxpY0lkIiwiaW5wdXRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/generateAndUploadImage/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/formdata-node","vendor-chunks/ms","vendor-chunks/core-js","vendor-chunks/lodash","vendor-chunks/openai","vendor-chunks/cloudinary","vendor-chunks/form-data-encoder","vendor-chunks/whatwg-url","vendor-chunks/agentkeepalive","vendor-chunks/tr46","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/webidl-conversions","vendor-chunks/q","vendor-chunks/humanize-ms","vendor-chunks/event-target-shim","vendor-chunks/cloudinary-core","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2FgenerateAndUploadImage%2Froute&page=%2Fapi%2FgenerateAndUploadImage%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2FgenerateAndUploadImage%2Froute.ts&appDir=D%3A%5CArtDocumentation%5C2024_ImageEcologySimulation%5CecologyAPI%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CArtDocumentation%5C2024_ImageEcologySimulation%5CecologyAPI&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();