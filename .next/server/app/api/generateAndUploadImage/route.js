"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/generateAndUploadImage/route";
exports.ids = ["app/api/generateAndUploadImage/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2FgenerateAndUploadImage%2Froute&page=%2Fapi%2FgenerateAndUploadImage%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2FgenerateAndUploadImage%2Froute.ts&appDir=D%3A%5CArtDocumentation%5C2024_ImageEcologySimulation%5CecologyAPI%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CArtDocumentation%5C2024_ImageEcologySimulation%5CecologyAPI&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2FgenerateAndUploadImage%2Froute&page=%2Fapi%2FgenerateAndUploadImage%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2FgenerateAndUploadImage%2Froute.ts&appDir=D%3A%5CArtDocumentation%5C2024_ImageEcologySimulation%5CecologyAPI%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CArtDocumentation%5C2024_ImageEcologySimulation%5CecologyAPI&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_ArtDocumentation_2024_ImageEcologySimulation_ecologyAPI_src_app_api_generateAndUploadImage_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/generateAndUploadImage/route.ts */ \"(rsc)/./src/app/api/generateAndUploadImage/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/generateAndUploadImage/route\",\n        pathname: \"/api/generateAndUploadImage\",\n        filename: \"route\",\n        bundlePath: \"app/api/generateAndUploadImage/route\"\n    },\n    resolvedPagePath: \"D:\\\\ArtDocumentation\\\\2024_ImageEcologySimulation\\\\ecologyAPI\\\\src\\\\app\\\\api\\\\generateAndUploadImage\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_ArtDocumentation_2024_ImageEcologySimulation_ecologyAPI_src_app_api_generateAndUploadImage_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/generateAndUploadImage/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnZW5lcmF0ZUFuZFVwbG9hZEltYWdlJTJGcm91dGUmcGFnZT0lMkZhcGklMkZnZW5lcmF0ZUFuZFVwbG9hZEltYWdlJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGZ2VuZXJhdGVBbmRVcGxvYWRJbWFnZSUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDQXJ0RG9jdW1lbnRhdGlvbiU1QzIwMjRfSW1hZ2VFY29sb2d5U2ltdWxhdGlvbiU1Q2Vjb2xvZ3lBUEklNUNzcmMlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUQlM0ElNUNBcnREb2N1bWVudGF0aW9uJTVDMjAyNF9JbWFnZUVjb2xvZ3lTaW11bGF0aW9uJTVDZWNvbG9neUFQSSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDOEQ7QUFDM0k7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90cmVuZHMtYWktZ2VuZXJhdG9yLz83YWVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkQ6XFxcXEFydERvY3VtZW50YXRpb25cXFxcMjAyNF9JbWFnZUVjb2xvZ3lTaW11bGF0aW9uXFxcXGVjb2xvZ3lBUElcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcZ2VuZXJhdGVBbmRVcGxvYWRJbWFnZVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZ2VuZXJhdGVBbmRVcGxvYWRJbWFnZS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2dlbmVyYXRlQW5kVXBsb2FkSW1hZ2VcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2dlbmVyYXRlQW5kVXBsb2FkSW1hZ2Uvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJEOlxcXFxBcnREb2N1bWVudGF0aW9uXFxcXDIwMjRfSW1hZ2VFY29sb2d5U2ltdWxhdGlvblxcXFxlY29sb2d5QVBJXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGdlbmVyYXRlQW5kVXBsb2FkSW1hZ2VcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2dlbmVyYXRlQW5kVXBsb2FkSW1hZ2Uvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2FgenerateAndUploadImage%2Froute&page=%2Fapi%2FgenerateAndUploadImage%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2FgenerateAndUploadImage%2Froute.ts&appDir=D%3A%5CArtDocumentation%5C2024_ImageEcologySimulation%5CecologyAPI%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CArtDocumentation%5C2024_ImageEcologySimulation%5CecologyAPI&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/generateAndUploadImage/route.ts":
/*!*****************************************************!*\
  !*** ./src/app/api/generateAndUploadImage/route.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var cloudinary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cloudinary */ \"(rsc)/./node_modules/cloudinary/cloudinary.js\");\n/* harmony import */ var cloudinary__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cloudinary__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n// app/api/generateAndUpload/route.ts\n\n\n\n// ---------- utils ----------\nfunction dedupLower(arr) {\n    const seen = {};\n    const out = [];\n    for (const t of arr || []){\n        const k = String(t ?? \"\").trim().toLowerCase();\n        if (k && !seen[k]) {\n            seen[k] = true;\n            out.push(String(t).trim());\n        }\n    }\n    return out;\n}\nfunction join(arr, sep = \", \") {\n    if (!arr || !Array.isArray(arr) || arr.length === 0) return \"\";\n    return arr.map((s)=>String(s ?? \"\").trim()).filter(Boolean).join(sep);\n}\nfunction asArray(v) {\n    if (Array.isArray(v)) return v.map(String);\n    if (v == null) return [];\n    // comma-separated string support\n    return String(v).split(\",\").map((s)=>s.trim()).filter(Boolean);\n}\n// ---------- clients ----------\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\ncloudinary__WEBPACK_IMPORTED_MODULE_1__.v2.config({\n    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n    api_key: process.env.CLOUDINARY_API_KEY,\n    api_secret: process.env.CLOUDINARY_API_SECRET\n});\n// ---------- route ----------\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        // Log safely\n        try {\n            console.log(\"attempts remix___:\", body, JSON.stringify(body).slice(0, 500));\n        } catch  {\n            console.log(\"attempts remix: [unserializable body]\");\n        }\n        // #### New rich fields ####\n        const prompt = String(body?.prompt ?? \"\");\n        const adjectives = String(body?.adjectives ?? \"\");\n        const styles = asArray(body?.styles);\n        const communities = asArray(body?.communities);\n        const trends = asArray(body?.trends);\n        const descriptions = asArray(body?.descriptions);\n        const parentIds = asArray(body?.parentIds);\n        const people = asArray(body?.people);\n        // support both \"object\" and \"objects\"\n        const objectsArr = asArray(body?.objects ?? body?.object);\n        // #### Back-compat fields (optional) ####\n        const folder = String(body?.folder ?? \"imageEcology\");\n        const communityFallback = String(body?.community ?? \"\");\n        const titleIn = String(body?.title ?? \"\");\n        const userTagsArr = asArray(body?.tags);\n        // Compose a single, high-signal prompt for the LLM → Image generator\n        const userPrompt = [\n            `You are an image prompt engineer crafting a *single* vivid social media image prompt in English. PLease ensure the prompt will follow our content guidelines.`,\n            `Source descriptions (merge meanings, avoid literal collage text):`,\n            ...descriptions.map((d)=>`- ${d}`),\n            \"\",\n            `Desired vibe / tags: ${adjectives || \"—\"}`,\n            styles.length ? `Style cues: ${join(styles)}` : \"\",\n            communities.length || communityFallback ? `Community context: ${join(communities.length ? communities : [\n                communityFallback\n            ])}` : \"\",\n            trends.length ? `Trending motifs: ${join(trends)}` : \"\",\n            people.length ? `including: ${join(people)}` : \"\",\n            \"\",\n            `Constraints:`,\n            `- Unify the scene into one coherent world; not a grid.`,\n            `- If multiple styles are present, harmonize rather than list.`\n        ].filter(Boolean).join(\"\\n\");\n        // Prompt expansion (compact, one-line)\n        const completion = await openai.chat.completions.create({\n            model: \"gpt-4o-mini\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"Return a single, compact prompt line suitable for an image model; no preamble; no lists.\"\n                },\n                {\n                    role: \"user\",\n                    content: userPrompt\n                }\n            ],\n            max_tokens: 180,\n            temperature: 0.8\n        });\n        const sentenceRaw = completion.choices?.[0]?.message?.content ?? \"\";\n        const remixedPrompt = sentenceRaw.replaceAll('\"', \"\").trim();\n        const safetySuffix = \"Square image. No text, no UI, no watermark, no signatures.\";\n        console.log(\"makes image from parents: \", sentenceRaw);\n        // Image generation\n        const imageGen = await openai.images.generate({\n            model: \"dall-e-3\",\n            prompt: `${remixedPrompt}\\n${safetySuffix}`.trim(),\n            n: 1,\n            size: \"1024x1024\"\n        });\n        const b64 = imageGen.data?.[0]?.b64_json ?? null;\n        const remoteUrl = imageGen.data?.[0]?.url ?? null;\n        if (!b64 && !remoteUrl) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Image generation returned no data\"\n            }, {\n                status: 502\n            });\n        }\n        const uploadSource = b64 ? `data:image/png;base64,${b64}` : remoteUrl;\n        // Title to store (prefer explicit title, then remixed, then original prompt)\n        const titleToStore = titleIn || remixedPrompt || prompt || \"image\";\n        // Pick one community string to store in context (if arrays present, use first)\n        const communityToStore = communities && communities[0] || communityFallback || \"\";\n        // ---------- Upload to Cloudinary ----------\n        const uploadResult = await cloudinary__WEBPACK_IMPORTED_MODULE_1__.v2.uploader.upload(uploadSource, {\n            folder,\n            context: {\n                alt: titleToStore,\n                caption: titleToStore,\n                parentIds: parentIds.length ? parentIds.join(\",\") : \"\",\n                community: communityToStore\n            },\n            moderation: \"aws_rek:\" + \"explicit_nudity:0.7:\" + \"hate_symbols:0.6:\" + \"suggestive:ignore:\" + \"violence:ignore:\" + \"visually_disturbing:ignore:\" + \"rude_gestures:ignore:\" + \"drugs:ignore:\" + \"tobacco:ignore:\" + \"alcohol:ignore:\" + \"gambling:ignore\"\n        });\n        // Moderation check\n        const moderationArr = uploadResult.moderation;\n        const wasRejected = moderationArr?.some((m)=>m.status === \"rejected\" && m.kind?.startsWith(\"aws_rek\"));\n        if (wasRejected) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"image does not adhere to our policy\"\n            }, {\n                status: 400\n            });\n        }\n        // ---------- Vision enrichment ----------\n        const visionPrompt = `\nYou will be given an image collected in a users social media feed: \"${titleToStore}\".\n\nReturn ONLY minified JSON with these keys:\n{\"title\":\"\",\"caption\":\"\",\"altText\":\"\",\"feeling\":\"\",\"so_me_type\":\"\",\"trend\":\"\",\"style\":\"\",\"tags\":[],\"vibe\":[],\"objects\":[],\"scenes\":[],\"people\":[]}\n\nRules:\n- \"title\": ≤ 7 words, aligned with \"${titleToStore}\" (refine if needed).\n- \"caption\": ≤ 2 sentences.\n- \"altText\": ≤ 15 words, describing neutrally the image.\n- \"so_me_type\": a title that might identify which Social Media Archetype the image might belong to.\n- \"trend\": a title that might identify which viral trend the image belongs to.\n- \"tags\": up to 12 short tags (nouns/adjectives; no hashtags/emojis).\n- \"feeling\": speculate what feelings it might produce / why we look at it.\n- \"objects\": up to 8 concrete things visible.\n- \"style\": sentences describing the image style for reproduction (photograph/illustration/etc., realism, other style notes).\n- \"people\": check if there are faces; describe each; name celebrity if applicable.\n- No extra text; JSON only.`;\n        const vision = await openai.chat.completions.create({\n            model: \"gpt-4o\",\n            temperature: 0.3,\n            response_format: {\n                type: \"json_object\"\n            },\n            max_tokens: 400,\n            messages: [\n                {\n                    role: \"user\",\n                    content: [\n                        {\n                            type: \"text\",\n                            text: visionPrompt\n                        },\n                        {\n                            type: \"image_url\",\n                            image_url: {\n                                url: uploadResult.secure_url\n                            }\n                        }\n                    ]\n                }\n            ]\n        });\n        const raw = vision.choices?.[0]?.message?.content ?? \"{}\";\n        let ai = {};\n        try {\n            ai = JSON.parse(raw);\n        } catch  {\n            ai = {};\n        }\n        const payload = {\n            title: String(ai?.title ?? titleToStore ?? \"\").trim(),\n            caption: String(ai?.caption ?? \"\").trim(),\n            altText: String(ai?.altText ?? \"\").trim(),\n            so_me_type: String(ai?.so_me_type ?? \"\").trim(),\n            feeling: String(ai?.feeling ?? \"\").trim(),\n            trend: String(ai?.trend ?? \"\").trim(),\n            style: String(ai?.style ?? \"\").trim(),\n            people: Array.isArray(ai?.people) ? ai.people.map(String) : [],\n            tags: Array.isArray(ai?.tags) ? ai.tags.map(String) : [],\n            vibe: Array.isArray(ai?.vibe) ? ai.vibe.map(String) : [],\n            objects: Array.isArray(ai?.objects) ? ai.objects.map(String) : [],\n            scenes: Array.isArray(ai?.scenes) ? ai.scenes.map(String) : []\n        };\n        // Merge tags: user adjectives & arrays → vision inference\n        const adjectivesAsTags = asArray(adjectives);\n        const mergedFromVision = dedupLower([\n            ...payload.tags,\n            ...payload.vibe,\n            ...payload.objects,\n            ...payload.scenes,\n            ...objectsArr,\n            ...people,\n            ...styles,\n            ...trends,\n            ...communities\n        ]).slice(0, 25);\n        const finalTags = dedupLower([\n            ...mergedFromVision,\n            ...adjectivesAsTags,\n            ...userTagsArr\n        ]);\n        // Cloudinary expects comma-separated tags when using explicit()\n        const tagsString = finalTags.join(\",\");\n        // ---------- Enrich Cloudinary asset ----------\n        await cloudinary__WEBPACK_IMPORTED_MODULE_1__.v2.uploader.explicit(uploadResult.public_id, {\n            type: \"upload\",\n            tags: tagsString,\n            context: {\n                caption: titleToStore,\n                alt: payload.altText,\n                ai_title: payload.title,\n                ai_style: payload.style,\n                ai_trend: payload.trend,\n                ai_so_me_type: payload.so_me_type,\n                ai_feeling: payload.feeling,\n                ai_vibe: (payload.vibe || []).join(\", \"),\n                ai_objects: (payload.objects || []).slice(0, 5).join(\", \"),\n                community: communityToStore,\n                parentIds: parentIds.join(\",\"),\n                ai_people: payload.people,\n                // also echo inputs for lineage/auditing\n                remix_prompt: remixedPrompt\n            }\n        });\n        // ---------- Response (compatible with your client DTO) ----------\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            url: uploadResult.secure_url,\n            publicId: uploadResult.public_id,\n            title: titleToStore,\n            alt: payload.altText,\n            ai_title: payload.title,\n            ai_vibe: (payload.vibe || []).join(\", \"),\n            ai_objects: (payload.objects || []).slice(0, 5).join(\", \"),\n            ai_style: payload.style,\n            ai_trend: payload.trend,\n            ai_so_me_type: payload.so_me_type,\n            community: communityToStore,\n            tags: finalTags,\n            parentIds: parentIds.length ? parentIds : null,\n            ai_people: payload.people,\n            remixedPrompt,\n            // also return raw inputs for reference\n            inputs: {\n                prompt,\n                adjectives,\n                styles,\n                communities,\n                trends,\n                descriptions,\n                people,\n                objects: objectsArr\n            }\n        });\n    } catch (error) {\n        console.error(\"Generate+Upload error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to generate and upload image\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/generateAndUploadImage/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/formdata-node","vendor-chunks/ms","vendor-chunks/core-js","vendor-chunks/lodash","vendor-chunks/cloudinary","vendor-chunks/openai","vendor-chunks/cloudinary-core","vendor-chunks/tr46","vendor-chunks/q","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/whatwg-url","vendor-chunks/event-target-shim","vendor-chunks/agentkeepalive","vendor-chunks/form-data-encoder","vendor-chunks/webidl-conversions","vendor-chunks/abort-controller","vendor-chunks/humanize-ms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2FgenerateAndUploadImage%2Froute&page=%2Fapi%2FgenerateAndUploadImage%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2FgenerateAndUploadImage%2Froute.ts&appDir=D%3A%5CArtDocumentation%5C2024_ImageEcologySimulation%5CecologyAPI%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CArtDocumentation%5C2024_ImageEcologySimulation%5CecologyAPI&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();